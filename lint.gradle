buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:6.0.25"
    classpath "se.bjurr.violations:violations-gradle-plugin:1.37"
  }
}

apply plugin: 'pmd'
apply plugin: com.github.spotbugs.snom.SpotBugsPlugin
apply plugin: se.bjurr.violations.gradle.plugin.ViolationsGradlePlugin

def configDir = "${buildscript.sourceFile.parentFile}/config/linting"

spotbugs {
    toolVersion = '4.7.3'
    ignoreFailures = false
    effort = com.github.spotbugs.snom.Effort.MAX
    reportLevel = com.github.spotbugs.snom.Confidence.values()[0]     //low
    excludeFilter = file("${configDir}/spotbugs-filter.xml")   
}

pmd {
    toolVersion = '6.39.0'
    ignoreFailures = false
    ruleSetFiles = files("${configDir}/pmd-ruleset.xml")
    ruleSets = []
    rulesMinimumPriority = 5
    incrementalAnalysis = true
    consoleOutput = true
    try {
        incrementalAnalysis = true
    } catch (def e) {
    }
}

task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
    maxRuleColumnWidth = 25
    maxMessageColumnWidth = 80

    minSeverity = 'INFO' // INFO, WARN or ERROR
    detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
    maxViolations = 0 // Will fail the build if total number of found violations is higher

    violations = [
        ["FINDBUGS", buildDir.path, ".*/spotbugs/.*\\.xml\$", "SpotBugs"],
        ["PMD", buildDir.path, ".*/pmd/.*\\.xml\$", "PMD"]
    ]
}

task lint {
     description = 'Run all lint checks'
     dependsOn spotbugsMain, spotbugsTest, pmdMain, pmdTest, violations // Adjust based on your needs
}

// Ensure violations task runs after the analysis tasks
tasks.check.dependsOn violations